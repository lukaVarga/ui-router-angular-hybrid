{"version":3,"file":"uirouter-angular-hybrid.mjs","sources":["../../src/angular-hybrid.ts","../../src/uirouter-angular-hybrid.ts"],"sourcesContent":["import { Component, ElementRef, Inject, Injector, Input, ModuleWithProviders, NgModule } from '@angular/core';\nimport { downgradeComponent, UpgradeModule, getAngularJSGlobal, getAngularLib } from '@angular/upgrade/static';\n\nimport {\n  StateObject,\n  forEach,\n  PathNode,\n  Resolvable,\n  StateRegistry,\n  UIRouter,\n  ViewConfig,\n  ViewService,\n} from '@uirouter/core';\n\nimport {\n  applyModuleConfig,\n  NATIVE_INJECTOR_TOKEN,\n  ng2LazyLoadBuilder,\n  Ng2ViewConfig,\n  UIView,\n  _UIROUTER_SERVICE_PROVIDERS,\n  Ng2ViewDeclaration,\n  ParentUIViewInject,\n  StatesModule,\n  UIROUTER_MODULE_TOKEN,\n  UIROUTER_ROOT_MODULE,\n  UIRouterModule,\n  makeChildProviders,\n} from '@uirouter/angular';\n\nimport { $InjectorLike, Ng1ViewConfig } from '@uirouter/angularjs';\n\nimport { UIRouterRx } from '@uirouter/rx';\nimport { NgHybridStatesModule } from './interfaces';\n\nconst getAngularJS = getAngularJSGlobal || getAngularLib;\nconst angular = getAngularJS();\n\nif (!angular) {\n  throw new Error(\n    'AngularJS not found on window.  https://github.com/ui-router/angular-hybrid/wiki/AngularJS-not-found-on-window'\n  );\n}\n\n/**\n * Create a ng1 module for the ng1 half of the hybrid application to depend on.\n *\n * Example:\n * const myApp = angular.module('myApp', ['ui.router.upgrade']);\n */\nexport const upgradeModule = angular.module('ui.router.upgrade', ['ui.router']);\n\nexport function objectFactory() {\n  return {};\n}\n\n/**\n * UIViewNgUpgrade is a component bridge from ng1 ui-view to ng2 ui-view\n *\n * When a ui-router for ng1 is registering a state it checks if a view's\n * `component:` is an ng2 Component class. If so, it creates a special ng1 template\n * which references this component, i.e., <ui-view-ng-upgrade></ui-view-ng-upgrade>\n *\n * See that code by searching ng1-to-ng2 source for: \"$stateProvider.decorator\"\n *\n * ---\n *\n * ng1-to-ng2 component bridge process:\n *\n * 1)\n * When an ng1 template creates a ui-view which is targeted by a ng2 Component,\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- ui-view created in ng1 template -->\n * </div> <!-- targeted with { component: Ng2RoutedComponent } -->\n * ```\n *\n * the state decorator spits out a custom template.  That template loads this\n * ng2 Component adapter as a downgraded-to-ng1 directive.\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- decorated template references the downgraded component -->\n *   <ui-view-ng-upgrade> <!-- downgraded adapter component -->\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * This downgraded ng2 Component then creates a child UIView (ng2 component)\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- custom template references the downgraded component -->\n *   <ui-view-ng-upgrade> <!-- ng2 component adapter downgraded to ng1-->\n *     <ui-view> <!-- pure ng2 ui-view -->\n *      </ui-view>\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * which in turn is filled with the routed ng2 component.\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- ng1 ui-view -->\n *   <ui-view-ng-upgrade> <!-- ng2 component adapter (downgraded to ng1)-->\n *     <ui-view> <!-- pure ng2 ui-view -->\n *       <ng2-routed-component> <!-- ng2 component hosted in ng2 ui-view -->\n *         <h1>ng2 routed component contents</h1>\n *       </ng2-routed-component>\n *     </ui-view>\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * This adapter exposes exposes the parent view context (ParentUIViewInject)\n * as an ng2 DI Provider, which the nested ng2 UIView requires.\n *\n * It gets the ParentUIViewContext information (from the parent ng1 ui-view) by walking\n * up the DOM and grabbing the .data('$uiView') which the ng1 ui-view directive exposes.\n */\n@Component({\n  selector: 'ui-view-ng-upgrade',\n  template: ` <ui-view [name]=\"name\"></ui-view> `,\n  // provide a blank object as PARENT_INJECT.\n  // The component will add property getters when it is constructed.\n  viewProviders: [{ provide: UIView.PARENT_INJECT, useFactory: objectFactory }],\n})\nexport class UIViewNgUpgrade {\n  // The ui-view's name (or '$default')\n  @Input()\n  name: string;\n\n  constructor(\n    ref: ElementRef,\n    @Inject(UIView.PARENT_INJECT) parent: ParentUIViewInject,\n    registry: StateRegistry // access the root state\n  ) {\n    // From the ui-view-ng-upgrade component's element ref, walk up the DOM two elements...\n    // There will first be an ng1 ui-view which hosts this element, and then that ui-view's parent element.\n    // That (parent) element has access to the proper \"parent viewcontext\"\n\n    // The ng2 ui-view component is inside this ui-view-ng-upgrade directive, which is inside the ng1 \"host\" ui-view.\n    // Both ui-views share the same \"view context\" information (the view's fqn and created-by-state context information)\n    const ng1elem = angular.element(ref.nativeElement).parent().parent();\n\n    // Expose getters on PARENT_INJECT for context (creation state) and fqn (view address)\n    // These will be used by further nested UIView\n    Object.defineProperty(parent, 'context', {\n      get: function () {\n        const data = ng1elem['inheritedData']('$uiView');\n        return data && data.$cfg ? data.$cfg.viewDecl.$context : registry.root();\n      },\n      enumerable: true,\n    });\n\n    Object.defineProperty(parent, 'fqn', {\n      get: function () {\n        const data = ng1elem['inheritedData']('$uiView');\n        return data && data.$uiView ? data.$uiView.fqn : null;\n      },\n      enumerable: true,\n    });\n  }\n}\n\n/**********************************\n * Ng2 @NgModule and bootstrap code\n **********************************/\n\n// Register the ng1 DI '$uiRouter' object as an ng2 Provider.\nexport function uiRouterUpgradeFactory(router: UIRouter, injector: Injector) {\n  const modules: StatesModule[] = injector.get<StatesModule[]>(UIROUTER_MODULE_TOKEN, []);\n  modules.forEach((module) => applyModuleConfig(router, injector, module));\n  return router;\n}\n\nexport function getUIRouter($injector: any) {\n  return $injector.get('$uiRouter');\n}\n\nexport function getParentUIViewInject(r: StateRegistry): ParentUIViewInject {\n  return { fqn: null, context: r.root() };\n}\n\n/**\n * This NgModule should be added to the root module of the hybrid app.\n */\n@NgModule({\n  imports: [UIRouterModule, UpgradeModule],\n  declarations: [UIViewNgUpgrade],\n  providers: [\n    // @uirouter/angular code will use the ng1 $uiRouter instance instead of creating its own.\n    { provide: '$uiRouter', useFactory: getUIRouter, deps: ['$injector'] },\n\n    { provide: UIRouter, useFactory: uiRouterUpgradeFactory, deps: ['$uiRouter', Injector] },\n\n    { provide: UIROUTER_ROOT_MODULE, useValue: {}, multi: true },\n\n    { provide: UIView.PARENT_INJECT, useFactory: getParentUIViewInject, deps: [StateRegistry] },\n\n    ..._UIROUTER_SERVICE_PROVIDERS,\n  ],\n  exports: [UIViewNgUpgrade, UIRouterModule],\n})\nexport class UIRouterUpgradeModule {\n  static forRoot(module: NgHybridStatesModule = {}): ModuleWithProviders<UIRouterUpgradeModule> {\n    return {\n      ngModule: UIRouterUpgradeModule,\n      providers: makeChildProviders(module as StatesModule),\n    };\n  }\n\n  static forChild(module: NgHybridStatesModule = {}): ModuleWithProviders<UIRouterUpgradeModule> {\n    return {\n      ngModule: UIRouterModule,\n      providers: makeChildProviders(module as StatesModule),\n    };\n  }\n}\n\n// Downgrade the UIViewNgUpgrade ng2 Component to an ng1 directive.\n// The directive is used in a (generated) view template by the (host) ng1 ui-router,\n// whenever it finds a view configured with a `component: <Ng2ComponentClass>`\nupgradeModule.directive(\n  'uiViewNgUpgrade',\n  <any>downgradeComponent({\n    component: UIViewNgUpgrade,\n    inputs: ['name'],\n  })\n);\n\nupgradeModule.run([\n  '$injector',\n  (ng1Injector: $InjectorLike) => {\n    const $uiRouter: UIRouter = ng1Injector.get('$uiRouter');\n\n    /** Add support for observable state and param changes */\n    $uiRouter.plugin(UIRouterRx);\n\n    // Expose a merged ng1/ng2 injector as a Resolvable (on the root state).\n    // This mimics how ui-router-ng2 exposes the root ng2 Injector, but\n    // it retrieves from ng1 injector first, then ng2 injector if the token isn't found.\n    const mergedInjector = {\n      get: function (token: any, ng2NotFoundValue?: any) {\n        if (ng1Injector.has(token)) {\n          return ng1Injector.get(token);\n        }\n        const ng2Injector = ng1Injector.get('$$angularInjector');\n        return ng2Injector.get(token, ng2NotFoundValue);\n      },\n    };\n\n    const ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, mergedInjector);\n    $uiRouter.stateRegistry.root().resolvables.push(ng2InjectorResolvable);\n  },\n]);\n\n/** Adds support for `loadChildren`: Angular NgModule lazy loading via @gntools/webpack */\nupgradeModule.config([\n  '$stateRegistryProvider',\n  ($stateRegistry: StateRegistry) => {\n    $stateRegistry.decorator('lazyLoad', ng2LazyLoadBuilder);\n  },\n]);\n\n/**\n * Define a stateProvider `views` builder decorator.\n * The decorator first applies the standard views builder function.\n * Then it finds any view components which are **actually** a Ng2 Component Class.\n * It overwrites that view's config with a ng1-to-ng2 hybrid config.\n *\n * In place of the template provider, it simply puts a <ui-view-ng-upgrade/> component\n * which that provides a ng1 -> ng2 boundary in the component tree.\n */\nupgradeModule.config([\n  '$stateRegistryProvider',\n  ($stateRegistry: StateRegistry) => {\n    $stateRegistry.decorator('views', function (state: StateObject, parentFn: Function) {\n      const views = parentFn(state);\n\n      forEach(views, (viewDecl: any, viewName: string) => {\n        if (viewDecl.$type === 'ng1-to-ng2' || typeof viewDecl.component === 'function') {\n          // Update the view config.\n          // Override default ng1 `component:` behavior (of defining a templateProvider)\n          // with a <ui-view-ng-upgrade> adapter directive template\n          viewDecl.$type = 'ng1-to-ng2';\n          viewDecl.templateProvider = null;\n          viewDecl.template = `<ui-view-ng-upgrade name='${viewDecl.$uiViewName}'></ui-view-ng-upgrade>`;\n        }\n      });\n      return views;\n    });\n  },\n]);\n\n// UI-Router ViewConfig factories take a view declaration object from a state.views: { foo: <ViewDeclaration> }\n// and return a runtime config object (a ViewConfig)\nupgradeModule.run([\n  '$view',\n  '$templateFactory',\n  ($view: ViewService, $templateFactory: any) => {\n    // Register a ViewConfig factory for views of type `ng2`\n    $view._pluginapi._viewConfigFactory(\n      'ng2',\n      (path: PathNode[], config: Ng2ViewDeclaration) => new Ng2ViewConfig(path, config)\n    );\n\n    // Register a ViewConfig factory for views of type `ng1-to-ng2`.\n    // Returns both an ng1 config and an ng2 config allowing either ng1 or ng2 ui-view components to be targeted.\n    $view._pluginapi._viewConfigFactory('ng1-to-ng2', (path: PathNode[], config: Ng2ViewDeclaration) => {\n      const ng1ViewConfig: ViewConfig = <any>(\n        new Ng1ViewConfig(<any>path, <any>Object.assign({}, config, { $type: 'ng1' }), $templateFactory)\n      );\n      const ng2ViewConfig: ViewConfig = <any>(\n        new Ng2ViewConfig(<any>path, <any>Object.assign({}, config, { $type: 'ng2' }))\n      );\n\n      return [ng2ViewConfig, ng1ViewConfig];\n    });\n  },\n]);\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}